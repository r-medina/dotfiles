#+TITLE: emacs config
#+AUTHOR: Ricky Medina
#+DATE: 2020-05-27

#+PROPERTY: header-args :results silent

After getting to know org-mode, I am starting the process of moving more and
more of my life onto it.

I've had my [[file:../notes/20200526192638-emacs.org][emacs]] config all over the place for the last 10 years, but this is
an attempt to get it documented and in one place.

* Workflow

  Since this file is managed by dotdrop, the git directory here doesn't
  correspond to how version control is actually happening now.

  When this file (or any config) is edited and the changes work,
  something like the following has to happen (probably from
  =~/.dotfiles=):

  #+begin_src shell :noeval :tangle no
    ./dotdrop.sh --profile=home import ~/.emacs.d/
  #+end_src


* General

** Keep the backups in a sane location
   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
     (setq backup-by-copying t)
   #+end_src

** And not that I'm writing too much elisp, but just in case
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/usr")
   #+end_src

** Miscellaneous

   Cursor color:
   #+begin_src emacs-lisp
     (set-cursor-color "#77bdbf")
   #+end_src

   Supposed to help with performance
   #+begin_src emacs-lisp
     (setq inhibit-compacting-font-caches t)
   #+end_src

   Only one space after period
   #+begin_src emacs-lisp
     (setq sentence-end-double-space nil)
   #+end_src

   [[https://www.emacswiki.org/emacs/WinnerMode][=winner-mode=]] allows for window configuration undo and redo with
   =C-c left= and =C-c right=
   #+begin_src emacs-lisp
     (setq winner-mode t)
   #+end_src

   Fixes =dired= issue on startup (no longer needed for some reasion)
   [2020-12-15 Tue]
   #+begin_src emacs-lisp
     ;; (if (eq system-type 'darwin)
     ;;     (setq insert-directory-program "gls" dired-use-ls-dired t))
   #+end_src

   So coding system works consistently in terminal (I don't remember
   why I initially needed this):
   #+begin_src emacs-lisp
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+end_src

   So selections get deleted if you type:
   #+begin_src emacs-lisp
     (delete-selection-mode 1)
   #+end_src

   Getting rid of annoying bell:
   #+begin_src emacs-lisp
     (setq ring-bell-function #'ignore)
   #+end_src

   Reloads a file if saved elsewhere ([[https://www.gnu.org/software/emacs/manual/html_node/emacs/Reverting.html][docs]]):
   #+begin_src emacs-lisp
     (global-auto-revert-mode t)
   #+end_src

   #+begin_src emacs-lisp
     (global-visual-line-mode t)
   #+end_src
   
   Function for basic cleaning of buffer:
   #+begin_src emacs-lisp
     (defun my-clean ()
       (interactive)
       (setq end (point-max))
       "does some cleaning up of files"
       (indent-region 0 end)
       (delete-trailing-whitespace 0 end))
   #+end_src

   So deleting words backwards (=M-<Backspace>=) doesn't yank ([[https://www.emacswiki.org/emacs/BackwardDeleteWord][source]]):
   #+begin_src emacs-lisp
     (defun delete-word (arg)
       "Delete characters forward until encountering the end of a
     word. With argument, do this that many times."
       (interactive "p")
       (delete-region (point) (progn (forward-word arg) (point))))

     (defun backward-delete-word (arg)
       "Delete characters backward until encountering the end of a word.
     With argument, do this that many times."
       (interactive "p")
       (delete-word (- arg)))
   #+end_src

   Better browser:
   #+begin_src emacs-lisp
     ;; TODO: make it take more than one url
     (defun my-chrome (url &optional work)
       "opens Google chrome. Optional argument profile defaults to
     personal profile, but if work is passed, it will use my work
     account. This may only work with my current laptop setup. Exits
     when emacs quits :("
       (let ((chrome-cmd (string-join
			  '("\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\""
			    "--remote-debugging-port=9222")
			  " "))
	     (personal-profile "Profile 2")
	     (work-profile "Profile 3"))
	 (save-window-excursion
	   (start-process "my-chrome-process" nil
			  "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
			  (format "--profile-directory=%s"
				  (if work work-profile personal-profile))
			  "--remote-debugging-port=9222"
			  url))))

     (defun make-my-chrome-inter (&optional work)
       "returns an interactive function that properly calls the my-chrome function"
       (lexical-let ((work work))
	 (lambda (start end) (interactive "r")
	   (my-chrome (if (use-region-p)
			  (let* ((selected (buffer-substring start end))
				 (prompt (format "? %s" selected)))
			    (read-string
			     (format "url: " prompt) prompt))
			(read-string "url: ")) work))))
   #+end_src

   Putting entire paragraph on one line
   # https://emacs.stackexchange.com/questions/2606/opposite-of-fill-paragraph#:~:text=6%20Answers&text=Quoting%20from%20Emacs%20Wiki%2C%20by,is%20the%20contrary%20of%20FillParagraph.
   #+begin_src emacs-lisp
     (defun unfill-paragraph ()
       "Takes a multi-line paragraph and makes it into a single line of text."
       (interactive)
       (let ((fill-column (point-max)))
	 (fill-paragraph nil)))
   #+end_src


** my-keys-mode-map setup

   More on this later:
   #+begin_src emacs-lisp
     ;; TODO: add bindings in use-package statements to this instead
     (defvar my-keys-mode-map (make-keymap) "key map containing all of my personal shortcuts")
   #+end_src


* Packages

  A lot of the following was taken from [[https://github.com/hrs/dotfiles/blob/master/emacs/dot-emacs.d/init.el][this config]].

** The almighty use-package:

   This installs it and updates package list just in case

*** Package configurations

    I may have to install =org-mode= on its own for the literate stuff to work.

    I'm going to keep these all in the same block rather than having a
    bunch of text explaining each one.

    #+begin_src emacs-lisp
      (use-package ace-jump-mode
	:bind (:map my-keys-mode-map
		    ("C-j" . ace-jump-mode)))

      (use-package atomic-chrome
	:mode (("github\\.com'" . gfm-mode))
	:config
	(atomic-chrome-start-server))

      (use-package auto-package-update
	:config
	(setq auto-package-update-delete-old-versions t)
	(setq auto-package-update-hide-results t)
	(auto-package-update-maybe))

      (use-package beacon
	:commands (beacon-mode beacon-blink)
	:config
	(beacon-mode 1)
	(setq beacon-color "#77bdbf")
	:bind (:map my-keys-mode-map
		    ("C-c b" . beacon-blink)))

      (use-package bufler
	:bind (:map my-keys-mode-map
		    ("C-c C-f" . bufler)))

      ;; https://github.com/ShardeDeLane/doom-emacs/blob/e7fa8750c2ea8d74b75e4a5b47f31639394aac37/modules/app/calendar/config.el
      (use-package calfw
	:bind (:map my-keys-mode-map
		    ("C-%" . cfw:open-org-calendar))
	:config
	;; better frame for calendar
	(setq cfw:face-item-separator-color nil
	      cfw:render-line-breaker 'cfw:render-line-breaker-none
	      cfw:fchar-junction ?╋
	      cfw:fchar-vertical-line ?┃
	      cfw:fchar-horizontal-line ?━
	      cfw:fchar-left-junction ?┣
	      cfw:fchar-right-junction ?┫
	      cfw:fchar-top-junction ?┯
	      cfw:fchar-top-left-corner ?┏
	      cfw:fchar-top-right-corner ?┓)

	(define-key cfw:calendar-mode-map "q" #'+calendar/quit))

      (use-package calfw-org)

      (use-package company
	:hook (after-init . global-company-mode)
	:config
	(setq company-idle-delay .2)
	;; starts completing after a single character instead of 3
	(setq company-minimum-prefix-length 1)
	;; aligns fields in completions
	(setq company-tooltip-align-annotations t)
	(setq company-global-modes '(not markdown-mode org-mode))

	(use-package company-lsp))

      (use-package diff-hl
	:commands diff-hl
	:hook
	(diff-hl-mode . diff-hl-margin-mode)
	(diff-hl-mode . diff-hl-flydiff-mode)
	(magit-pre-refresh . diff-hl-magit-pre-refresh)
	(magit-post-refresh . diff-hl-magit-post-refresh))

      (use-package dockerfile-mode)

      (use-package edit-server
	:config
	(edit-server-start)
	(setq edit-server-new-frame nil))

      (use-package expand-region
	:quelpa (expand-region :fetcher github :repo "magnars/expand-region.el")
	:bind
	(:map my-keys-mode-map
	      ("C-=" . er/expand-region)
	      ("C-+" . er/contract-region)))

      (use-package flyspell
	:hook (prog-mode . flyspell-prog-mode))

      (use-package forge)

      (use-package git-link
	:config
	(setq git-link-use-commit t)
	:bind
	("C-c l" . git-link))

      (use-package go-mode
	:mode "\\.go\\'"
	:hook
	(go-mode . lsp-deferred)
	(before-save . lsp-format-buffer)
	(before-save . lsp-organize-imports)

	:config

	(use-package flycheck-gometalinter
	  :config
	  (setq flycheck-gometalinter-vendor t)    ;; only show errors
	  (setq flycheck-gometalinter-tests t)

	  (flycheck-gometalinter-setup))

	(setq lsp-ui-doc-enable nil
	      lsp-ui-peek-enable t
	      lsp-ui-sideline-enable t
	      lsp-ui-imenu-enable t
	      ;; lsp-ui-flycheck-enable t
	      )

	(use-package go-rename)
	(use-package gotest)
	(use-package golint)
	(use-package go-imports)
	(use-package go-guru
	  :ensure t
	  :hook
	  (go-mode  . go-guru-hl-identifier-mode)
	  :config
	  (setq go-guru-hl-identifier-idle-time .1)))

      (use-package golden-ratio
	:config
	(golden-ratio-mode 1)
	(golden-ratio-toggle-widescreen))

      (use-package hcl-mode
	:mode "\\.hcl.ctmpl\\'")

      (use-package heaven-and-hell
	:hook
	(after-init . heaven-and-hell-init-hook)
	:config
	(setq heaven-and-hell-theme-type 'dark)
	(setq heaven-and-hell-themes
	      '((light . Greymatters-light)
		(dark . Greymatters-dark)))
	(setq heaven-and-hell-load-theme-no-confirm t)

	;; toggling unfortunately breaks org-bullets
	;; TODO: finish fixing
	(defun org-bullets-fix-font ()
	  (mapcar (if org-bullets-mode
		      (let ((foreground (org-find-invisible-foreground)))
			(when foreground
			  (set-face-foreground 'org-hide foreground))))
		  (buffer-list)))

	(advice-add 'heaven-and-hell-toggle-theme :after #'org-bullets-fix-font))

      ;; https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/
      ;; (use-package ivy :ensure t
      ;;   :diminish (ivy-mode . "")
      ;;   :bind
      ;;   (:map ivy-mode-map
      ;; 	("C-'" . ivy-avy))
      ;;   :config
      ;;
      ;;   ;; include counsel for counsel-M-x
      ;;
      ;;   (ivy-mode 1)
      ;;   ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
      ;;   (setq ivy-use-virtual-buffers t)
      ;;   ;; number of result lines to display
      ;;   (setq ivy-height 10)
      ;;   ;; does not count candidates
      ;;   (setq ivy-count-format "")
      ;;   ;; no regexp by default
      ;;   (setq ivy-initial-inputs-alist nil)
      ;;   ;; configure regexp engine.
      ;;   (setq ivy-re-builders-alist
      ;; 	;; allow input not in order
      ;;         '((t   . ivy--regex-ignore-order))))

      (use-package helm
	:config
	(helm-mode 1)
	;; (helm :sources '(helm-bufler-source))
	:bind  (:map helm-map
		     ("<tab>" . 'helm-execute-persistent-action)
		     :map my-keys-mode-map
		     ("M-x" . helm-M-x)
		     ("C-x C-b" . helm-multi-files)
		     ("C-x C-f" . helm-find-files)
		     ("C-x g" . helm-projectile-grep)
		     ("C-c p" . helm-projectile)))

      (use-package helm-flyspell
	:bind (:map my-keys-mode-map
		    ("C--" . helm-flyspell-correct)))

      (use-package helm-projectile)

      (use-package json-mode) ;; init in el-get

      (use-package lsp-mode)
      (use-package lsp-ui
	;; :ensure t
	;; :commands lsp-ui-mode
	:config
	;; (setq lsp-ui-doc-delay .5)
	;; (setq lsp-ui-doc-position "Bottom")
	)

      (use-package magit
	:bind (:map my-keys-mode-map
		    ("C-S-U" . magit-status)))

      (use-package markdown-mode
	:ensure t
	:mode (("README\\.md\\'" . gfm-mode)
	       ("\\.md\\'" . markdown-mode))
	:init
	(setq markdown-command "multimarkdown"))

      (use-package org
	:ensure org-plus-contrib
	:mode ("\\.org\\'" . org-mode)
	:hook
	(org-mode . flyspell-mode)
	(org-mode . turn-on-auto-fill)

	:bind (("C-j" . nil)
	       :map org-mode-map
	       ("M-<left>" . nil)
	       ("M-S-<left>" . org-metaleft)
	       ("M-C-S-<left>" . org-shiftmetaleft)
	       ("M-<right>" . nil)
	       ("M-S-<right>" . org-metaright)
	       ("M-C-S-<right>" . org-shiftmetaright)
	       ("C-c C-." . org-time-stamp))

	:config

	(setq org-image-actual-width 500)

	(set-time-zone-rule "/usr/share/zoneinfo/America/New_York")

	(setq org-directory "~/notes")
	(setq org-agenda-files '("~/notes"))

	(setq org-ellipsis "↩")

	(setq org-startup-folded t)

	(setq org-tag-alist '((:startgrouptag)
			      ("work" . ?w)
			      (:grouptags)
			      ("meeting" . ?t)
			      ("pairing")
			      ("github" . ?g)
			      (:endgrouptag)
			      (:startgrouptag)
			      ("github" . ?g)
			      (:grouptags)
			      ("byron")
			      ("tim")
			      ("aaron")
			      ("sven")
			      ("steve")
			      ("todd")
			      (:endgrouptag)

			      ("onething" . ?o)
			      (:grouptags)
			      ("weekly")
			      ("daily")
			      ("monthly")
			      ("year")
			      ("5year")
			      ("someday")
			      (:endgrouptag)

			      ("health" . ?h)

			      (:startgrouptag)
			      ("family" . ?f)
			      (:grouptags)
			      ("mom" . ?m)
			      ("dad" . ?d)
			      ("zach" . ?z)
			      (:endgrouptag)

			      ("personal" . ?p)
			      ("es" . ?s)
			      ("readme" . ?r)
			      ("email" . ?e)

			      (:startgrouptag)
			      ("essays")
			      (:grouptags)
			      ("health")
			      ("life")
			      ("learning")
			      ("random")
			      ("golang")
			      ("identity")
			      ("technology")
			      ("programming")
			      ("errors")
			      (:endgrouptag)))

	(use-package org-ref)

	;; TODO: some of the reading stuff?
	(setq org-todo-keywords
	      '((sequence "TODO(t)" "IN PROGRESS(p)" "|" "DONE(d)" "NOPE(n)" "SKIP(k)")
		(sequence "WAITING(w)" "|")
		(sequence "PAUSED(P)" "|")
		(sequence "MAYBE(m)" "|")
		(sequence "WATCH(W)" "|")))

	(setq org-super-agenda-groups
	      '((:auto-group t)
		(:name "One Thing - Weekly"
		       :and (:tag "onething" :tag "weekly" :deadline future))
		(:name "One Thing - Daily"
		       :and (:tag "onething" :tag "daily"))

		(:name "Scheduled"
		       :time-grid t
		       :and (:scheduled today :deadline today :not (:todo ("DONE" "SKIP" "NOPE"))))

		(:name "Other Scheduled"
		       :scheduled today :deadline today)

		(:name "Work Overdue"
		       :and (:tag "work" :scheduled past)
		       :and (:tag "work" :deadline past))

		(:name "Started"
		       :and (:todo ("WAITING" "IN PROGRESS")))

		(:name "Other Overdue"
		       :scheduled past
		       :deadline past)

		(:name "Upcoming"
		       :deadline future)

		;; (:name "This Week"
		;; 	 :deadline (before (format-time-string
		;; 			    "%Y-%m-%d"
		;; 			    (org-time-string-to-time (org-read-date nil nil "sun")))))

		(:name "Reading"
		       :todo ("QUEUED" "READING" "NOTES"))))

	(use-package org-super-agenda
	  :config
	  (org-super-agenda-mode))

	(use-package org-ql
	  :quelpa (org-ql :fetcher github :repo "alphapapa/org-ql")
	  :config
	  (setq org-agenda-custom-commands
		'(("r" "Custom View"
		   ((org-ql-block '(or (todo
					"TODO" "IN PROGRESS" "WAITING" "SCHED" "QUEUED" "NOTES" "")
				       (and (ts-a) (not (done)))))))
		  ("R" "README"
		   ((org-ql-block '(and (not (tags "work"))
					(or (tags "readme")
					    (todo "READING" "QUEUED" "NOTES")))))))))

	;; refile into any org agenda file
	(setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
	(setq org-refile-use-outline-path 'file)
	(setq org-outline-path-complete-in-steps nil)

	;; log when item was finished
	;; from https://orgmode.org/manual/Closing-items.html
	(setq org-log-done 'time)
	(setq org-log-into-drawer t)

	(setq org-reverse-note-order t)

	(setq org-capture-templates
	      '(;; capture template for adding books to reading list - they
		;; can be re-filed appropriately with C-c C-w
		;;
		;;   * Title
		;;     [2020-06-06]
		;;
		;;     Some Author
		("b" "Book" entry (file+headline "books.org" "Inbox")
		 "* %^{title}\n  %U\n\n  %^{author}%?\n" :prepend t :empty-lines 1)

		;; articles - we don't add the date as a property because it's not as important here
		;;
		;;   * QUEUED Article Title
		;;     SCHEDULED: <2020-08-16 Sun>
		;;     [2020-06-24]
		;;
		;;     article-link
		("a" "Article" entry (file "articles.org")
		 "* QUEUED %^{title}\n  SCHEDULED: %t\n  %U\n\n  %^{link}%?\n"
		 :prepend t :empty-lines 1)

		;; just uncategorized things to go into inbox
		;;
		;;   * the thing
		;;     [2020-06-24]
		("i" "Inbox" entry (file "inbox.org")
		 "* %^{item}\n  %U%?\n" :prepend t)
		("t" "TODO" entry (file "inbox.org")
		 "* TODO %^{todo}\n  SCHEDULED: %^t\n" :prepend t)

		;; capture project ideas
		;;
		;; ** the project idea
		;;    [2020-06-79]
		("p" "Project" entry (file+headline "projects.org" "Ideas")
		 "* %^{project}\n  %U%?\n" :prepend t :empty-lines 1)

		;; quotes!
		;; * the quote
		;;   [2020-04-11]
		;;
		;;   Who
		("q" "Quote" entry (file "quotes.org")
		 "* %^{quote}\n  %U\n\n  %^{who}%?\n" :prepend t :empty-lines 1)

		;; for new supplements to evaluate
		;; * supplement
		;;   [2020-01-11]
		("s" "Supplement" entry (file+headline "supplements.org" "Inbox")
		 "* %^{supplement}\n  %U%?\n")

		;; new meetings
		("c" "Calendar")

		("cw" "Work Meeting")
		("cwr" "recurring" entry (file+olp "github.org" "Meetings" "Recurring")
		 "* %^{meeting}\n  SCHEDULED: %^t\n  [[%^{zoom link}][zoom]]\n"
		 :prepend t :empty-lines 1)
		("cwo" "one off" entry (file+olp "github.org" "Meetings" "One Offs")
		 "* %^{meeting}\n  SCHEDULED: %^t\n  [[%^{zoom link}][zoom]]\n\n** TODO Agenda\n\n** TODO Notes\n"
		 :prepend t :empty-lines 1)

		("cp" "Personal Event")
		("cpr" "recurring" entry (file+olp "me.org" "Calendar" "Recurring")
		 "* %^{meeting}\n  SCHEDULED: %^t\n"
		 :prepend t :empty-lines 1)
		("cpo" "one off" entry (file+olp "me.org" "Calendar" "One Offs")
		 "* %^{meeting}\n  SCHEDULED: %^t\n"
		 :prepend t :empty-lines 1)

		("O" "One Off Calendar Event" entry (file+olp "me.org" "Calendar" "One Offs")
		 "* %^{meeting}\n  SCHEDULED: %^t\n"
		 :prepend t :empty-lines 1)
	  
		("w" "Work")
		("wt" "TODO" entry (file+headline "github.org" "TODOs")
		 "* TODO %^{task}\n  SCHEDULED: %t\n  %U%?\n"
		 :prepend t :empty-lines 1)
		("wn" "Note" entry (file+olp "github.org" "Notes")
		 "* %^{item}\n  %U\n\n%?\n" :prepend t :empty-lines 1)
		("wb" "block off time" entry (file+function "github.org" org-reverse-datetree-goto-date-in-file)
		 "* %^{task}\n  SCHEDULED: %^t\n")

		;; essay ideas
		("e" "Essay Idea" entry (file+headline "essays.org" "Ideas")
		 "* %^{idea}\n  %U%?\n" :prepend t :empty-lines 1)

		("d" "Dailies")
		("dw" "Work Dailies" entry (file+function "github.org" org-reverse-datetree-goto-date-in-file)
		 "* %?\n  %T\n")
		("da" "Work Pairing" entry (file+function "github.org" org-reverse-datetree-goto-date-in-file)
		 "* %^{problem} %^g\n  %T\n  %?\n" :empty-lines 1)

		("dp" "Personal Dailies" entry (file+function "me.org" org-reverse-datetree-goto-date-in-file)
		 "* %?\n  %T\n" :empty-lines 1)

		;;; one thing

		("o" "One Thing")

		("op" "Personal")
		("opd" "Daily" entry (file+function "me.org" org-reverse-datetree-goto-date-in-file)
		 "* %^{task} :onething:daily:\n  DEADLINE: %t\n"
		 :prepend t :empty-lines 1)
		("opw" "Weekly" entry (file+function "me.org" org-reverse-datetree-goto-date-in-file)
		 "* %^{task} :onething:weekly:\n  DEADLINE: <%(org-read-date nil nil \"sun\") Sun>\n  %U%?\n"
		 :prepend t :empty-lines 1)
		("opm" "Monthly" entry (file+function "me.org" org-reverse-datetree-goto-date-in-file)
		 "* %^{task} :onething:monthly:\n  DEADLINE: %t\n  %U%?\n"
		 :prepend t :empty-lines 1)

		("ow" "Work")
		("owd" "Daily" entry (file+function "github.org" org-reverse-datetree-goto-date-in-file)
		 "* %^{task} :onething:daily:\n  DEADLINE: %t\n"
		 :prepend t :empty-lines 1)
		("oww" "Weekly" entry (file+function "github.org" org-reverse-datetree-goto-date-in-file)
		 "* %^{task} :onething:weekly:\n  DEADLINE: <%(org-read-date nil nil \"fri\") Fri>\n  %U%?\n"
		 :prepend t :empty-lines 1)
		("owm" "Monthly" entry (file+function "github.org" org-reverse-datetree-goto-date-in-file)
		 "* %^{task} :onething:monthly:\n  DEADLINE: %t\n  %U%?\n"
		 :prepend t :empty-lines 1)

		("D" "One Thing Work Daily" entry (file+function "github.org" org-reverse-datetree-goto-date-in-file)
		 "* %^{task} :onething:daily:\n  DEADLINE: %t\n"
		 :prepend t :empty-lines 1)

	  
		      ;;; \end one thing


		("j" "Joke Idea" entry (file+headline "jokes.org" "Ideas")
		 "* %^{joke}\n  %U\n  %?\n"
		 :prepend t :empty-lines 1)

		;; for org-capture-extension ;; TODO

		("L" "Protocol Link" entry (file "inbox.org")
		 "* %^{description}\n  %U\n\n  %^{link}\n" :prepend t :empty-lines 1)))

	(require 'org-tempo)

	;; TODO
	;; (use-package calfw-org)

	(use-package org-pomodoro
	  :config
	  (setq org-pomodoro-length 15)
	  (setq org-pomodoro-long-break-frequency 4)
	  (setq org-pomodoro-manual-break t))

	(use-package org-reverse-datetree
	  :config
	  (setq-default org-reverse-datetree-level-formats
			'("%Y"
			  "%Y-%m %B"
			  "%Y-%m-%d %A")))

	(use-package org-bullets
	  :hook (org-mode . (lambda () (org-bullets-mode 1))))

	(use-package ob-go
	  :init
	  (org-babel-do-load-languages
	   'org-babel-load-languages '((go . t))))

	;; TODO: might not need this actually
	(require 'ob-shell
		 (org-babel-do-load-languages
		  'org-babel-load-languages '((shell . t))))

	(use-package ox-hugo)
	(use-package ox-gfm)
	(use-package ox-pandoc)

	(use-package ox-reveal
	  :config
	  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")))

      (use-package org-roam
	:requires org
	:hook
	(emacs-startup-hook . org-roam-mode)
	:config
	(setq org-roam-dailies-capture-templates
	      '(("d" "daily" plain (function org-roam-capture--get-point)
		 ""
		 :immediate-finish t
		 :file-name "%<%Y-%m-%d>"
		 :head "#+TITLE: %<%Y-%m-%d>\n\n* Notes\n\n** Uncategorized\n\n\n* TODOs")))
	:bind (:map my-keys-mode-map
		    ("C-c o t" . org-roam-dailies-today)
		    ("C-c o c" . org-roam-capture)
		    ("C-c o f" . org-roam-find-file)
		    :map org-mode-map
		    ("C-c o r" . org-roam)
		    ("C-c o y" . org-roam-dailies-yesterday)
		    ("C-c o m" . org-roam-dailies-tomorrow)
		    ("C-c o d" . org-roam-dailies-date)
		    ("C-c o i" . org-roam-insert)
		    ("C-c o s" . org-roam-server-mode)
		    ("C-c o S" . (lambda () (interactive) (my-chrome "http://localhost:8080/"))))

	:config
	(setq org-roam-directory "~/notes")
	(setq org-roam-server-mode t))

      (use-package org-roam-bibtex
	:after org-roam
	:hook (org-roam-mode . org-roam-bibtex-mode)
	:bind (:map org-mode-map
		    (("C-c n a" . orb-note-actions))))

      (use-package paredit
	:hook
	(emacs-lisp-mode . enable-paredit-mode)
	(eval-expression-minibuffer-setup-hook . enable-paredit-mode)
	(ielm-mode-hook . enable-paredit-mode)
	(lisp-mode-hook . enable-paredit-mode)
	(lisp-interaction-mode-hook . enable-paredit-mode)
	(scheme-mode-hook . enable-paredit-mode)
	(javascript-mode-hook . enable-paredit-mode)
	(clojure-mode-hook . enable-paredit-mode)
	(org-mode-hook . enable-paredit-mode))

      (use-package pbcopy
	:config
	(turn-on-pbcopy))

      (use-package perfect-margin)

      (use-package plantuml-mode)

      (use-package protobuf-mode)

      (use-package pullover)

      (use-package switch-window
	:bind (:map my-keys-mode-map
		    ("C-x o" . switch-window)))

      (use-package tramp
	:config
	(setq tramp-default-method "ssh")
	(customize-set-variable 'tramp-syntax 'simplified))

      ;; more info here if i need to expand: https://github.com/efiivanir/.emacs.d/blob/a3f705714cc00f1fe2905a2ceaa99d9e97b8e600/settings/treemacs-settings.el
      (use-package treemacs)

      (use-package yaml-mode
	:mode ("\\.yaml\\'" "\\.yml\\'"))

      (use-package yasnippet
	:config
	(yas-global-mode 1)
	:bind (:map my-keys-mode-map
		    ("C-c y" . yas-expand)))
    #+end_src

** el-get

   https://github.com/dimitri/el-get

*** Installation
    #+begin_src emacs-lisp
      (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

      (unless (require 'el-get nil 'noerror)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
    #+end_src

*** Configure my custom recipes and configurations
    #+begin_src emacs-lisp
      (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes/")
      (setq el-get-user-package-directory "~/.emacs.d/el-get-user/init/")
    #+end_src

*** My packages
    #+begin_src emacs-lisp
      (setq my-packages
	    '(;; atom-dark-theme
	      chrome.el
	      ;; emacs-powerline
	      go-mod))
    #+end_src

*** Run it
    #+begin_src emacs-lisp
      ;; (ignore-errors (el-get-self-update)) ;; maybe bring this back?
      ;; (el-get-update-all)
      ;; (el-get-cleanup my-packages) ;; deletes no-longer-listed packages

      ;; (el-get 'sync my-packages)
    #+end_src


* Look/Feel

  #+begin_src emacs-lisp
    ;; get rid of menus and bars
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    ;; get rid of startup screens
    (setq inhibit-splash-screen t)
    (setq inhibit-startup-message t)

    (column-number-mode t)
    ;; so lines don't get broken onto next line if longer than buffer
    (set-default 'truncate-lines t)

    ;; show matching parenthesis
    (show-paren-mode t)

    ;; fixing scrolling behavior to be less jumpy
    (setq scroll-step 1)
    (setq scroll-conservatively 10000)
    (setq auto-window-vscroll nil)
  #+end_src


* Programming

  Fixes annoying comment that =ruby-mode= puts in:
  #+begin_src emacs-lisp
    (setq ruby-insert-encoding-magic-comment nil)
  #+end_src


* Key Bindings

  Inspired by [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][this stackoverflow]]. The idea is you make all your
  personal key bindings in their own map that you can disable and get
  to everything underneath.

  #+begin_src emacs-lisp
    (global-set-key (kbd "<M-DEL>") 'backward-delete-word)

    ;; personal minor mode for key map. GREAT hack
    (define-minor-mode my-keys-mode
      "A minor mode so that my key settings override annoying major modes."
      t " my-keys" 'my-keys-mode-map)
    (my-keys-mode 1)

    ;; toggle my minor mode
    (global-unset-key (kbd "M-m"))
    (global-set-key (kbd "M-m m") 'my-keys-mode)

    (global-set-key (kbd "M-Q") 'unfill-paragraph)

    (let ((m my-keys-mode-map))
      (define-key m (kbd "C-t") 'comment-or-uncomment-region)
      (define-key m (kbd "C-S-T") (lambda () (interactive) (org-agenda)))
      (define-key m (kbd "M-P") 'package-list-packages)
      (define-key m (kbd "M-E") 'el-get-list-packages)
      (define-key m (kbd "M-S") 'eshell)
      (define-key m (kbd "C-c a") 'org-capture)
      (define-key m (kbd "C-c c") 'my-clean)
      (define-key m (kbd "C-c b") 'beacon-blink)
      (define-key m (kbd "C-c t") 'heaven-and-hell-toggle-theme)
      (define-key m (kbd "C-c g") 'golden-ratio-toggle-widescreen)
      (define-key m (kbd "C-v") 'nav-text-minor-mode)

      (define-key m (kbd "C-c . e")       ; open README.org
	(lambda () (interactive) (find-file "~/.emacs.d/README.org")))
      (define-key m (kbd "C-c . E")       ; open emacs config
	(lambda () (interactive) (find-file "~/.emacs.d/init.el")))
      (define-key m (kbd "C-c . z")       ; open .zshrc
	(lambda () (interactive) (find-file "~/.zshrc")))
      (define-key m (kbd "C-c . o")       ; open .zsh
	(lambda () (interactive) (find-file "~/.oh-my-zsh")))
      (define-key m (kbd "C-c . b")       ; open .bashrc
	(lambda () (interactive) (find-file "~/.bashrc")))
      (define-key m (kbd "C-c . i")       ; open init folder
	(lambda () (interactive) (find-file "~/.emacs.d/el-get-user/init")))

      ;; experimenting

      ;; chrome search for work
      (define-key m (kbd "C-c . w") (make-my-chrome-inter t))

      ;; chrome search for personal
      (define-key m (kbd "C-c . c") (make-my-chrome-inter nil))

      ;; opens Joe zoom + facebook page
      (define-key m (kbd "C-c . j")
	(lambda () (interactive)
	  (my-chrome (getenv "JOE_ZOOM"))
	  (my-chrome "https://www.facebook.com/groups/565308257695776/post_tags/?post_tag_id=566705834222685")))

      ;; work

      ;; open github notifications
      (define-key m (kbd "C-c . n")
	(lambda () (interactive)
	  (my-chrome "https://github.com/notifications" t)))

      ;; open project board for packages
      (define-key m (kbd "C-c . a")
	(lambda () (interactive)
	  (my-chrome "https://dev.azure.com/githubpackages/Packages/_boards/board/t/Tim-Team/Stories" t)))


      m)

    ;; for directed buffer navigation
    (setq windmove-wrap-around t)
    (define-prefix-command 'nav-map)
    (define-key my-keys-mode-map (kbd "C-n") nav-map)
    (let ((m nav-map))
      (define-key m (kbd "o") 'windmove-up)
      (define-key m (kbd "l") 'windmove-down)
      (define-key m (kbd "j") 'windmove-left)
      (define-key m (kbd "k") 'windmove-right))

    ;; for quickly changing minor modes
    (define-prefix-command 'quick-modes-map)
    (define-key my-keys-mode-map (kbd "M-m") quick-modes-map)
    (let ((m quick-modes-map))
      (define-key m (kbd "w") 'whitespace-mode)
      (define-key m (kbd "l") 'display-line-numbers-mode)
      (define-key m (kbd "e") 'electric-pair-mode)
      (define-key m (kbd "f") 'flymake-mode)
      (define-key m (kbd "k") 'flycheck-mode)
      (define-key m (kbd "p") 'paredit-mode)
      (define-key m (kbd "o") 'outline-minor-mode)
      (define-key m (kbd "d") 'diff-hl-mode)
      (define-key m (kbd "h") 'global-hl-line-mode)
      (define-key m (kbd "a") 'auto-complete-mode)
      (define-key m (kbd "j") 'treemacs)
      (define-key m (kbd "r") 'perfect-margin-mode)
      (define-key m (kbd "v") 'visual-line-mode)
      (define-key m (kbd "z") 'adaptive-wrap-prefix-mode)
      (define-key m (kbd "t") 'toggle-truncate-lines))

    ;; minor mode for navigating text easily
    ;; enter into it with M-m k
    (defvar nav-text-minor-mode-map
      (let ((m (make-sparse-keymap)))
	(suppress-keymap m t)
	(define-key m (kbd "j") 'backward-char)
	(define-key m (kbd "k") 'forward-char)
	(define-key m (kbd "o") 'previous-line)
	(define-key m (kbd "l") 'next-line)
	(define-key m (kbd "J") 'backward-word)
	(define-key m (kbd "K") 'forward-word)
	(define-key m (kbd "O") 'backward-paragraph)
	(define-key m (kbd "L") 'forward-paragraph)

	(define-key m (kbd "t") 'beginning-of-buffer)
	(define-key m (kbd "y") 'end-of-buffer)
	(define-key m (kbd "a") 'beginning-of-line)
	(define-key m (kbd "e") 'end-of-line)
	(define-key m (kbd "g") 'goto-line)
	(define-key m (kbd "m") 'ace-jump-mode)
	(define-key m (kbd "S") 'isearch-backward)
	(define-key m (kbd "s") 'isearch-forward)
	m)
      "nav-text-minor-mode keymap.")

    (define-minor-mode nav-text-minor-mode
      "A minor mode so that my hands hurt less."
      nil " nav-text" 'nav-text-minor-mode-map)
  #+end_src


* Elegance

  I was inspired by [[https://github.com/rougier/elegant-emacs][elegant-emacs]]' really minimal setup.  I started to
  take parts of it and realized that there wasn't much to the core
  pieces I like.

  #+begin_src emacs-lisp :results silent
    (defface face-faded nil
      "Faded face is for information that are less important.
    It is made by using the same hue as the default but with a lesser
    intensity than the default. It can be used for comments,
    secondary information and also replace italic (which is generally
    abused anyway)."

      ;; TODO
      :group 'elegance)

    (defface face-subtle nil
      "Subtle face is used to suggest a physical area on the screen.
    It is important to not disturb too strongly the reading of
    information and this can be made by setting a very light
    background color that is barely perceptible."
      :group 'elegance)

    ;; Font and frame size
    (set-face-font 'default "Monaco Light 13")
    (setq-default line-spacing 5)

    ;; Underline line at descent position, not baseline position
    (setq x-underline-at-descent-line t)

    ;; No ugly button for checkboxes
    (setq widget-image-enable nil)

    (define-key mode-line-major-mode-keymap [header-line]
      (lookup-key mode-line-major-mode-keymap [mode-line]))

    (defun mode-line-render (left right)
      (let* ((available-width (- (window-width) (length left) )))
	(format (format "%%s %%%ds" available-width) left right)))
    (setq-default mode-line-format
		  '((:eval
		     (mode-line-render
		      (format-mode-line (list
					 (propertize "☰" 'face `(:inherit mode-line-buffer-id)
						     'help-echo "Mode(s) menu"
						     'mouse-face 'mode-line-highlight
						     'local-map   mode-line-major-mode-keymap)
					 " %b "
					 (if vc-mode
					     ;; TODO
					     ;; from https://www.reddit.com/r/emacs/comments/8ng8io/how_do_show_only_git_branch_on_modeline/
					     (let* ((noback (replace-regexp-in-string (format "^ %s" (vc-backend buffer-file-name)) " " vc-mode))
						    (face (cond ((string-match "^ -" noback) 'mode-line-vc)
								((string-match "^ [:@]" noback) 'mode-line-vc-edit)
								((string-match "^ [!\\?]" noback) 'mode-line-vc-modified))))
					       (propertize (format " @%s " (substring noback 2)) 'face '(:inherit face-subtle))))
					 " "
					 (if (and buffer-file-name (buffer-modified-p))
					     (propertize "*" 'face `(:inherit face-faded)))))
		      (format-mode-line
		       (propertize ""))))))

    ;; Comment if you want to keep the modeline at the bottom
    (setq-default header-line-format mode-line-format)
    (setq-default mode-line-format'(""))

    ;; Vertical window divider
    (setq window-divider-default-right-width 3)
    (setq window-divider-default-places 'right-only)
    (window-divider-mode)
  #+end_src


* TODOs

** TODO make a macro to encapsulate =:bind (:map my-key-mode-map)=
** TODO fix my-chrome!
   SCHEDULED: <2020-08-15 Sat>
   [2020-08-12 Wed]

** TODO move the last few packages out of el-get
